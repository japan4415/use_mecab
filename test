<!DOCTYPE html><html xmlns:og="http://ogp.me/ns#"><head><meta charset="UTF-8" /><title>JavaScript - new Array()と[]の違い - Qiita</title><meta content="width=device-width,initial-scale=1" name="viewport" /><meta content="JavaScriptで配列を生成するにはコンストラクタ new Array() とリテラル [] の二つがあるので違いをまとめておく。
個人的には、簡潔で読みやすいので、なるべく [] を使うべきだと思っている。

機能面での違い

どちらも配列オブジェクトを生成する。
ただし、整数を一つだけ渡した際の挙動が異なる。


new Array(3) はlengthが3の配列を生成する。中身は0から2まですべてundefinedになっている。
[3] は要素をひとつだけ含む..." name="description" /><meta content="summary" name="twitter:card" /><meta content="@Qiita" name="twitter:site" /><meta content="Hiraku" name="twitter:creator" /><meta content="JavaScript - new Array()と[]の違い - Qiita" property="og:title" /><meta content="article" property="og:type" /><meta content="http://qiita.com/Hiraku/items/d74690088dfa368875c9" property="og:url" /><meta content="http://cdn.qiita.com/assets/qiita-fb-896943050e55832a8cc2200eedf875d9.png" property="og:image" /><meta content="JavaScriptで配列を生成するにはコンストラクタ `new Array()` とリテラル `[]` の二つがあるので違いをまとめておく。
個人的には、簡潔で読みやすいので、なるべく `[]` を使うべきだと思っている。

# 機..." property="og:description" /><meta content="Qiita" property="og:site_name" /><meta content="564524038" property="fb:admins" /><link href="/icons/favicons/public/production.ico?v=4" rel="shortcut icon" type="image/x-icon" /><link href="/icons/favicons/public/apple-touch-icon.png" rel="apple-touch-icon" /><link href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet" /><link rel="stylesheet" media="all" href="http://cdn.qiita.com/assets/public_vender-4ee18457170f78c2ea70254b1e71ee98.css" /><link rel="stylesheet" media="all" href="http://cdn.qiita.com/assets/application-0a5cfb4e66b45fa2be6c9c667c5a9460.css" /><meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="R6sYZcZlYwN6jQLUuaCXyWNOGRXzVysTH7wwv8ReBuvf9eri7OCqo1c/h1rAGi+Q548YPGe6DyJDjoo0fZQ99A==" /></head><body class="without-js" id=""><noscript><iframe height="0" src="//www.googletagmanager.com/ns.html?id=GTM-TBQWPN" style="display:none;visibility:hidden" width="0"></iframe></noscript><script>
  document.body.className = document.body.className.replace('without-js', '') + ' with-js';

  // Application Namespace
  var Qiita = {
    startTime: Date.now(),
    controllerPath: 'public/items',
    controllerAction: 'public/items#show',
    controller: 'items',
    action: 'show',
    env: 'production',
    flash: {},
    config: {
      mixpanel: {"career":"dd35af27e959781713d63fd7ca898a8d","per_team":"c0a2116368b33b44b5029ebd2cc9b094","public":"be87616606b0e26a87689099aab2c4e5","team":"b7c0342acba2dbc8742484d98788efb3"}
    },

    // Fake jQuery
    // Emulate $.ready(fn) in views before load jQuery.
    _q: [],
    // The ready function that collect calls and put it in the queue
    ready: function (func) {
      if (typeof func==='function') Qiita._q.push(func);
      // return jQl in order to support jQuery(document).ready()
      return Qiita
    },
    // Run all queues inline $.ready() calls in the right order and purge the
    // queue
    unqueue: function () {
      for (var i = 0, l = Qiita._q.length; i < l; i++) Qiita._q[i]();
      Qiita._q = [];
    }
  };



  var $ = Qiita.ready, jQuery = $;
</script>
<header class="navbar navbar-default navbar-static-top" role="navigation"><div class="container"><div class="navbar-header navigationBar_header"><a class="navbar-brand siteBrand-public" href="/"><img class="siteBrand-publicLogo" src="http://cdn.qiita.com/assets/siteid-reverse-ddc187656dcf8859d033e242f3232ce8.png" /></a></div><form class="navbar-form navbar-left hidden-xs searchForm js-globalSearchForm" action="/search" accept-charset="UTF-8" method="get"><input name="utf8" type="hidden" value="&#x2713;" /><div class="searchForm_queryWrapper"><input type="text" name="q" id="q" placeholder="キーワードを入力" class="form-control searchForm_query js-globalSearchForm_query" /><div class="searchForm_wiseSearchButton js-wise-search"><i class="fa fa-caret-down"></i><i class="fa fa-spinner fa-spin"></i></div><div class="searchQuerySupport js-globalSearchForm_stockedSearch"><div class="searchQuerySupport_userSearch"><label class="searchQuerySupport_label">ユーザーを指定</label><input class="js-user-query searchQuerySupport_input" placeholder="例) qiitan" /></div><div class="searchQuerySupport_tagSearch"><label class="searchQuerySupport_label">タグを指定</label><input class="js-tag-query searchQuerySupport_input" placeholder="例) Ruby フレームワーク" /></div><div class="searchQuerySupport_sort"><div class="searchQuerySupport_sortLabel">ソート</div><select class="js-sort-type" name="sort"><option selected="selected" value="rel">関連度順</option><option value="created">新規投稿順</option><option value="stock">ストック数降順</option></select></div><label class="checkbox searchQuerySupport_stocked"><input type="checkbox" name="stocked" id="stocked" value="1" class="js-stock-only searchQuerySupport_checkbox" />ストックした投稿で絞り込む</label></div></div><input type="submit" name="commit" value="検索" class="btn btn-default btn-sm searchForm_submitBtn js-globalSearchForm_submitBtn" /></form><div class="navbar-text headerNews hidden-xs hidden-sm"><div class="headerNews_label label label-warning">Hot</div><a target="_blank" class="navbar-link" href="https://teams.qiita.com?utm_source=qiita&amp;utm_medium=header_news">Markdownによる情報共有サービス、Qiita:Team</a></div><ul class="nav navbar-nav navbar-right navigationBar_menu"><li><a track="click" data-label="LoginButtonAtNavbar" href="/login?redirect_to=%2FHiraku%2Fitems%2Fd74690088dfa368875c9">ログイン</a></li></ul><a class="btn btn-warning navbar-btn navbar-right" track="click" data-event-name="Signup Button Click" data-label="SignupButtonAtNavbar" href="/signup?redirect_to=%2FHiraku%2Fitems%2Fd74690088dfa368875c9">ユーザ登録</a></div></header><div id="main"><ol class="itemBreadcrumbs" itemscope="" itemtype="http://schema.org/BreadcrumbList"><li itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem"><a itemprop="item" href="/"><span itemprop="name">Qiita</span></a><meta content="1" itemprop="position" /></li><li itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem"><a itemprop="item" href="/items"><span itemprop="name">投稿</span></a><meta content="2" itemprop="position" /></li><li itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem"><a itemprop="item" href="/tags/javascript"><span itemprop="name">JavaScript</span></a><meta content="3" itemprop="position" /></li></ol><article itemscope="" itemtype="http://schema.org/Article"><div class="itemsShowHeader"><div class="container"><div class="row"><div class="col-sm-9"><h1 class="itemsShowHeaderTitle_title" itemprop="name">new Array()と[]の違い</h1><ul class="list-unstyled list-inline itemsShowHeaderTags"><li class="itemsShowHeaderTags_list"><div class="tagIcon"><a class="tagIcon_base" href="/tags/javascript"><img alt="JavaScript" class="tagIcon_img" src="https://s3-ap-northeast-1.amazonaws.com/qiita-tag-image/58f69837141ae3efa0c530ed53de128cacb49b66/medium.jpg?1421232838" /><div class="tagIcon_name">JavaScript</div><div class="tagIcon_count">7135</div></a></div></li></ul><ul class="list-unstyled list-inline itemsShowHeaderTitle_status"><li><a href="/Hiraku"><img class="itemsShowHeaderTitle_authorIcon" src="https://pbs.twimg.com/profile_images/1100290432/daemonicons_normal.jpg" alt="Daemonicons normal" /></a><a href="/Hiraku">Hiraku</a>が<time datetime="2012-05-12T22:40:51+09:00" itemprop="datePublished">2012/05/12</time>に投稿(<time datetime="2012-05-12T22:41:48+09:00" itemprop="dateModified">2012/05/12</time>に編集)</li><li class="hidden-xs"><a href="/drafts/d74690088dfa368875c9/edit">編集リクエストを作成する</a></li></ul></div><div class="col-sm-3"><div class="itemsShowHeaderStock"><ul class="list-unstyled itemsShowHeaderStock_statusList"><li><div class="itemsShowHeaderStock_count stock"><i class="fa fa-stock"></i><span class="js-stocksCount">91</span></div><div class="itemsShowHeaderStock_countText">ストック</div></li><li><div class="itemsShowHeaderStock_count" content="0 UserComments" itemprop="interactionCount"><i class="fa fa-comment-o"></i>0</div><div class="itemsShowHeaderStock_countText">コメント</div></li></ul><span class="js-stockButton itemStockButton" data-counter=".js-stocksCount" data-path="/Hiraku/items/d74690088dfa368875c9" data-position="top" data-uuid="d74690088dfa368875c9"><form class="button_to" method="post" action="/Hiraku/items/d74690088dfa368875c9/stock"><button class="btn btn-default btn-block itemStockButton_button-stock" type="submit"><i class="fa fa-stock unstock hidden-sm"></i>ストック</button><input type="hidden" name="authenticity_token" value="QGCGh34TES3YDiN3QDk83D5MXJrYo32esutXkUL8FPTYPnQAVJbYjfW8pvk5g4SFuo1ds0xOWa/u2e0a+zYv6w==" /></form><div class="btn btn-primary btn-block itemStockButton_button-stocking">ストック済み</div><form class="button_to" method="post" action="/Hiraku/items/d74690088dfa368875c9/unstock"><button class="btn btn-danger btn-block itemStockButton_button-unstock" type="submit">解除</button><input type="hidden" name="authenticity_token" value="QC1prIeHsltxgysc0brSVa/l41n2RQUfxTd1YDbWT53Yc5srrQJ7+1wxrpKoAGoMKyTicGKoIS6ZBc/rjxx0gg==" /></form></span></div><ul class="list-unstyled list-inline itemsShowHeaderStock_stockUsers"><li><a title="1987yama3" href="/1987yama3"><img alt="1987yama3" src="https://pbs.twimg.com/profile_images/79649734/mixi_normal.jpg" /></a></li><li><a title="k_ui" href="/k_ui"><img alt="k_ui" src="https://secure.gravatar.com/avatar/8a038e2fd3f60f0486a91541371839b6" /></a></li><li><a title="cou_z" href="/cou_z"><img alt="cou_z" src="https://avatars.githubusercontent.com/u/1119486?v=3" /></a></li><li><a title="ikesyo" href="/ikesyo"><img alt="ikesyo" src="https://avatars.githubusercontent.com/u/909674?" /></a></li><li><a title="norioc" href="/norioc"><img alt="norioc" src="https://pbs.twimg.com/profile_images/1559067848/f_normal.png" /></a></li><li><a title="hazy_moon" href="/hazy_moon"><img alt="hazy_moon" src="https://pbs.twimg.com/profile_images/1572292890/______2_normal.jpg" /></a></li><li><a title="daisuke" href="/daisuke"><img alt="daisuke" src="https://secure.gravatar.com/avatar/52e0a1ab3fecd8c46dae64848daf3c38?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png" /></a></li><li><a title="inyo0104" href="/inyo0104"><img alt="inyo0104" src="https://si0.twimg.com/profile_images/320590103/33290160_15_normal.jpg" /></a></li><li><a title="syoichi" href="/syoichi"><img alt="syoichi" src="https://pbs.twimg.com/profile_images/56573150/search_normal.png" /></a></li><li><a title="makoto69" href="/makoto69"><img alt="makoto69" src="https://pbs.twimg.com/profile_images/423162847/20090917_3_normal.png" /></a></li><a href="/Hiraku/items/d74690088dfa368875c9/stockers"><i class="fa fa-ellipsis-h"></i></a></ul></div></div></div></div><div class="container itemsShowBody"><div class="row scroll-chaser-wrapper"><div class="col-sm-9 itemsShowBody_articleColumn"><section class="markdownContent markdownContent-headingEnabled js-task-list-container clearfix position-relative" id="item-d74690088dfa368875c9" itemprop="articleBody"><div class="alert alert-warning"><i class="fa fa-clock-o"></i> この記事は最終更新日から1年以上が経過しています。</div><p>JavaScriptで配列を生成するにはコンストラクタ <code>new Array()</code> とリテラル <code>[]</code> の二つがあるので違いをまとめておく。<br>
個人的には、簡潔で読みやすいので、なるべく <code>[]</code> を使うべきだと思っている。</p>

<h1>機能面での違い</h1>

<p>どちらも配列オブジェクトを生成する。<br>
ただし、整数を一つだけ渡した際の挙動が異なる。</p>

<ul>
<li><code>new Array(3)</code> はlengthが3の配列を生成する。中身は0から2まですべてundefinedになっている。</li>
<li><code>[3]</code> は要素をひとつだけ含む配列を生成する。</li>
</ul>
<div class="code-frame"><div class="code-lang"><span class="bold">基本的な使い方</span></div><div class="highlight"><pre><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="p">);</span> <span class="c1">//1,2,3</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>          <span class="p">);</span> <span class="c1">//1,2,3</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">);</span> <span class="c1">//undefined, undefined, undefined</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span>          <span class="p">);</span> <span class="c1">//3</span>
</pre>
</div>
</div>
<p>逆に言えば、</p>

<ul>
<li>new Array()は[3]のように整数一つだけを含む配列を作成できない</li>
<li>[]はサイズを指定して配列を作成できない</li>
</ul>

<p>ということになる。</p>

<h1>速度面での違い…はほとんどない</h1>

<p>先に結論を書いてしまった。エンジンにもよるし使い方にもよる。どちらが速いというものでもないので、読みやすさを優先すればよい。</p>

<p>完璧主義者のために、差が出るポイントをまとめてみる。</p>

<h2>参照解決のコスト</h2>

<p>「Array」は予約語ではないので、ローカル変数を指している可能性がある。JavaScriptエンジンからすれば、「Array」が組み込みオブジェクトのArrayであることを特定する作業が必要になるのだ。わずかだがここにコストがかかる。<br>
これに対してリテラルは変数ではないので参照解決の必要がない。</p>

<p>このため、理論上は[]の方が速い。<br>
ただ、実際に測定してみるとほとんど差が感じられない。with()を10段重ねるとか、わざとらしいコードを書けば影響がわかるが、普通そんなことはしない。JavaScriptエンジンの最適化がよく効いているのだと思う。<br>
むしろ次の配列長の方が影響が大きい。</p>

<h2>配列長の変更コスト</h2>

<p>配列の長さを変更するのにも少しコストがかかる。<br>
このため、[]で作った配列を埋めていくより、最初から必要な配列長を指定して確保しておくと、速くなることがあった。（過去形です）</p>
<div class="code-frame"><div class="code-lang"><span class="bold"></span></div><div class="highlight"><pre><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[];</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">1000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">//古いブラウザでは↓の方が速い</span>
<span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">1000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
<span class="p">}</span>
</pre>
</div>
</div>
<p>一つずつ要素を入れて配列長をじわじわ伸ばしていくより、最初にまとめて確保しておいた方が軽いという理屈だ。<br>
古いJavaScriptエンジンでは有効なテクニックだったのだが、エンジンの進歩により、逆転現象が起きている。V8で測定すると[]を使った方が2倍ほど速かった。</p>

<p>というわけで、今の時代、タイプ数の多い <code>new Array</code> をあえて使う必要はない。</p>
<div class="hidden"><form class="js-task-list-update" action="/Hiraku/items/d74690088dfa368875c9" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="_method" value="patch" /><input type="hidden" name="authenticity_token" value="rWZMrwRkFNTL6h6AlM8rqutffWnRk8TAYKLDrxVoLZM1OL4oLuHddOZYmw7tdZPzb558QEV+4PE8kHkkrKIWjA==" /><input type="hidden" name="updated_at_confirmation_in_unixtime" id="updated_at_confirmation_in_unixtime" value="1336830108" class="js-task-list-updated-at" /><textarea name="raw_body" id="raw_body" class="js-task-list-field">
JavaScriptで配列を生成するにはコンストラクタ `new Array()` とリテラル `[]` の二つがあるので違いをまとめておく。
個人的には、簡潔で読みやすいので、なるべく `[]` を使うべきだと思っている。

# 機能面での違い

どちらも配列オブジェクトを生成する。
ただし、整数を一つだけ渡した際の挙動が異なる。

* `new Array(3)` はlengthが3の配列を生成する。中身は0から2まですべてundefinedになっている。
* `[3]` は要素をひとつだけ含む配列を生成する。

```javascript:基本的な使い方
console.log( new Array(1,2,3) ); //1,2,3
console.log( [1,2,3]          ); //1,2,3

console.log( new Array(3) ); //undefined, undefined, undefined
console.log( [3]          ); //3
```

逆に言えば、

* new Array()は[3]のように整数一つだけを含む配列を作成できない
* []はサイズを指定して配列を作成できない

ということになる。

# 速度面での違い…はほとんどない

先に結論を書いてしまった。エンジンにもよるし使い方にもよる。どちらが速いというものでもないので、読みやすさを優先すればよい。

完璧主義者のために、差が出るポイントをまとめてみる。

## 参照解決のコスト

「Array」は予約語ではないので、ローカル変数を指している可能性がある。JavaScriptエンジンからすれば、「Array」が組み込みオブジェクトのArrayであることを特定する作業が必要になるのだ。わずかだがここにコストがかかる。
これに対してリテラルは変数ではないので参照解決の必要がない。

このため、理論上は[]の方が速い。
ただ、実際に測定してみるとほとんど差が感じられない。with()を10段重ねるとか、わざとらしいコードを書けば影響がわかるが、普通そんなことはしない。JavaScriptエンジンの最適化がよく効いているのだと思う。
むしろ次の配列長の方が影響が大きい。

## 配列長の変更コスト

配列の長さを変更するのにも少しコストがかかる。
このため、[]で作った配列を埋めていくより、最初から必要な配列長を指定して確保しておくと、速くなることがあった。（過去形です）

```javascript
var arr = [];
for (var i=0; i&lt;1000; i++) {
  arr[i] = i;
}
//古いブラウザでは↓の方が速い
var arr = new Array(1000);
for (var i=0; i&lt;1000; i++) {
  arr[i] = i;
}
```

一つずつ要素を入れて配列長をじわじわ伸ばしていくより、最初にまとめて確保しておいた方が軽いという理屈だ。
古いJavaScriptエンジンでは有効なテクニックだったのだが、エンジンの進歩により、逆転現象が起きている。V8で測定すると[]を使った方が2倍ほど速かった。

というわけで、今の時代、タイプ数の多い `new Array` をあえて使う必要はない。</textarea><input type="submit" name="commit" value="Save changes" /></form></div></section><ul class="references js-referencesView"><li class="references_header"><i class="fa fa-fw fa-link"></i>この記事は以下の記事からリンクされています</li><li class="references_reference js-reference"><a href="/ituki_b/items/e11afba363a93e01f49a"><img src="https://pbs.twimg.com/profile_images/842946405/profile_img_normal.png" alt="Profile img normal" />jQueryプラグイン作成で気をつけたいところ１</a><span>からリンク</span><time class="references_datetime js-dateTimeView" datetime="2013-12-05T10:46:02+00:00">2年弱前</time></li><li class="references_reference js-reference"><a href="/redamoon/items/1c38ee93834588e3c4ff"><img src="https://pbs.twimg.com/profile_images/1713626524/_____normal.jpg" alt="     normal" />JavaScript・jQueryの改修・高速化のためのメモ</a><span>の</span><a href="/redamoon/items/1c38ee93834588e3c4ff#comment-529b4542f34e7095a3c1"><img src="https://pbs.twimg.com/profile_images/1019142336/2009y04m17d_191246234_normal.jpg" alt="2009y04m17d 191246234 normal" />コメント</a><span>からリンク</span><time class="references_datetime js-dateTimeView" datetime="2014-12-16T01:28:00+00:00">11ヶ月前</time></li></ul>  <div class="text-advertisement">
      <span class="label label-info">PR</span>
      <a target="_blank" id="ad-48" href="https://teams.qiita.com/?utm_content=48&amp;utm_medium=text&amp;utm_source=qiita">社内メールでの情報共有をなくそう - Qiita:Team</a>
  </div>
  <script>
    $(function() {
      'use strict';
      Qiita.analysis.showAdvertisement({ adId: 48 })
      $('#ad-48').click(function() {
        Qiita.analysis.clickAdvertisement({
          type:  'text',
          place: 'bottom',
          adId:  48
        })
      });
    });
  </script>
<div class="itemsShowComment"><div class="itemsShowComment_wrapper" id="comments"><div class="js-comments"></div><div class="itemsShowCommentSignupOrLogin"><div class="itemsShowCommentSignupOrLogin_title">あなたもコメントしてみませんか :)</div><a class="btn btn-primary" track="click" data-label="RegisterToComment" href="/signup?redirect_to=%2FHiraku%2Fitems%2Fd74690088dfa368875c9%23comments">ユーザー登録(無料)</a><div class="itemsShowCommentSignupOrLogin_sub">すでにアカウントを持っている方は<a href="/login?redirect_to=%2FHiraku%2Fitems%2Fd74690088dfa368875c9%23comments">ログイン</a></div></div></div></div></div><div class="col-sm-3 itemsShowBody_subColumn"><div class="socialButtons"><div class="socialButtons_twitter"><a class="twitter-share-button" data-text="JavaScript - new Array()と[]の違い by @Hiraku on @Qiita" data-url="http://qiita.com/Hiraku/items/d74690088dfa368875c9" href="https://twitter.com/share">ツイート</a></div><div class="socialButtons_hatebu"><a class="hatena-bookmark-button" data-hatena-bookmark-layout="standard" data-hatena-bookmark-title="JavaScript - new Array()と[]の違い - Qiita" href="http://b.hatena.ne.jp/entry/http://qiita.com/Hiraku/items/d74690088dfa368875c9" title="はてブに追加"><img alt="はてブに追加" height="20" src="http://b.st-hatena.com/images/entry-button/button-only.gif" style="border: none;" width="20" /></a><script async="async" charset="utf-8" src="http://b.st-hatena.com/js/bookmark_button.js" type="text/javascript"></script></div><div class="socialButtons_googlePlus"><div class="g-plusone" data-href="http://qiita.com/Hiraku/items/d74690088dfa368875c9" data-size="medium"></div></div></div><script>$(function() {
  // Web Intents Javascript Events : https://dev.twitter.com/docs/intents/events#waiting-for-asynchronous-resources
  twttr.ready(function (twttr) {
    twttr.events.bind('tweet', function(event) {
      if (event) {
        Qiita.Mixpanel.tweetAnItem({ uuid: "d74690088dfa368875c9" });
        ga('send', 'social', 'twitter', 'tweet', 'http://qiita.com');
        $.ajax({
          type: 'POST',
          url: '/notifications',
          data: {
            notification: {
              verb: 'tweet',
              uuid: "d74690088dfa368875c9"
            }
          }
        });
      }
    });
    twttr.events.bind('click', function (e) {
      if (e) {
        ga('send', 'social', 'twitter', 'click', 'http://qiita.com');
      }
    });
  });
});</script><section class="itemsShowAuthorInfo" itemprop="author" itemscope="" itemtype="http://schema.org/Person"><a href="/Hiraku"><img alt="Hiraku" class="itemsShowAuthorInfo_userIcon" itemprop="image" src="https://pbs.twimg.com/profile_images/1100290432/daemonicons_normal.jpg" /></a><div class="itemsShowAuthorInfo_profileStats"><strong class="itemsShowAuthorInfo_userName" itemprop="name"><a itemprop="url" href="/Hiraku">Hiraku</a></strong><div class="itemsShowAuthorInfo_contribution"><span class="itemsShowAuthorInfo_count">2504</span><span class="itemsShowAuthorInfo_unit">Contribution</span></div><span class="js-userFollowButton userFollowButton" data-position="author-info" data-url-name="Hiraku"><form class="button_to" method="post" action="/Hiraku/follow"><button class="btn btn-default btn-block userFollowButton_button-follow btn-xs" type="submit"><i class="fa fa-user-plus"></i>フォロー</button><input type="hidden" name="authenticity_token" value="YFmmOfatsV+PcR0KkmdU1B0IDNxhyReX4oiN55XWkF74B1S+3Ch4/6LDmITr3eyNmckN9fUkM6a+ujdsLByrQQ==" /></form><div class="btn btn-primary btn-block userFollowButton_button-following btn-xs">フォロー中</div><form class="button_to" method="post" action="/Hiraku/unfollow"><button class="btn btn-danger btn-block userFollowButton_button-unfollow btn-xs" type="submit">解除</button><input type="hidden" name="authenticity_token" value="jkVRNxbc+OXpxouxYXHIeJiLXW8CtHItY08VhyyBOnYWG6OwPFkxRcR0Dj8Yy3AhHEpcRpZZVhw/fa8MlUsBaQ==" /></form></span></div><section class="itemsShowAuthorPopularItems"><h6 class="itemsShowAuthorPopularItems_sectionTitle">人気の投稿</h6><ul class="itemsShowAuthorPopularItems_posts list-unstyled"><li itemscope="" itemtype="http://schema.org/Article"><a itemprop="url" track="click" data-label="AuthorPopularItemsAtSidebar" href="/Hiraku/items/dfda2f8a5353b0742271">WebAPIリクエスト仕様書としてcurlコマンドのご提案</a></li><li itemscope="" itemtype="http://schema.org/Article"><a itemprop="url" track="click" data-label="AuthorPopularItemsAtSidebar" href="/Hiraku/items/0db9a8fed4743c1f00a4">コードをまとめる技術としてのイテレータとジェネレータ</a></li><li itemscope="" itemtype="http://schema.org/Article"><a itemprop="url" track="click" data-label="AuthorPopularItemsAtSidebar" href="/Hiraku/items/de8c44520d5aa9268ac7">ブロックコメントの工夫</a></li><li itemscope="" itemtype="http://schema.org/Article"><a itemprop="url" track="click" data-label="AuthorPopularItemsAtSidebar" href="/Hiraku/items/1c67b51040246efb4254">curl_multiでHTTP並行リクエストを行うサンプル</a></li><li itemscope="" itemtype="http://schema.org/Article"><a itemprop="url" track="click" data-label="AuthorPopularItemsAtSidebar" href="/Hiraku/items/d74690088dfa368875c9">new Array()と[]の違い</a></li></ul></section></section><div class="scroll-chaser">  <div class="google-adsense">
  <style>
  .test-text-responsible { width: 200px; height: 200px; }
  @media(min-width: 1200px) {
    .test-text-responsible { width: 250px; height: 250px; }
  }
  @media(max-width: 979px) and (min-width: 768px) {
    .test-text-responsible { width: 120px; height: 240px; }
  }
  @media(max-width: 767px) {
    .test-text-responsible { width: 320px; height: 50px; }
  }
  </style>
  <script async src="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
  <!-- test_text_responsible -->
  <ins class="adsbygoogle test-text-responsible"
       style="display:inline-block"
       data-ad-client="ca-pub-8127218772604357"
       data-ad-slot="3880091879"></ins>
  <script>
  (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
</div>

<div class="js-tocAnchor"></div></div></div></div></div></article><script id="js-item" type="application/json">{ "url": "http://qiita.com/Hiraku/items/d74690088dfa368875c9", "id": 5248, "uuid": "d74690088dfa368875c9" }</script><script class="js-user" type="application/json">{&quot;id&quot;:1126,&quot;url_name&quot;:&quot;Hiraku&quot;,&quot;profile_image_url&quot;:&quot;https://pbs.twimg.com/profile_images/1100290432/daemonicons_normal.jpg&quot;}</script></div><footer class="footer"><div class="footer_inner"><div class="footer_container"><ul class="footer_links-left"><li class="footer_link"><a class="footer_copyright" href="http://increments.co.jp">© 2015 Increments Inc.</a></li><li class="footer_link"><a href="http://qiita.com/terms">利用規約</a></li><li class="footer_link"><a href="http://qiita.com/privacy">プライバシー</a></li><li class="footer_link"><a href="http://help.qiita.com">ヘルプ</a></li><li class="footer_link"><a href="https://increments.zendesk.com/anonymous_requests/new">お問い合わせ</a></li></ul><ul class="footer_links-right"><li class="footer_link"><a href="http://qiita.com/about">Qiitaとは</a></li><li class="footer_link"><a href="http://blog.qiita.com">ブログ</a></li><li class="footer_link"><a href="http://qiita.com/api/v2/docs">API</a></li><li class="footer_link"><a href="https://teams.qiita.com/">Team</a></li><li class="footer_link"><a href="http://kobito.qiita.com">Kobito</a></li><li class="footer_link"><a href="http://career.qiita.com">Career</a></li><li class="footer_link"><a class="js-public-form-feedback-link" data-target=".js-feedback-form" data-toggle="modal" href=""><i class="fa fa-heart"></i> ご意見 <i class="fa fa-caret-down"></i></a></li></ul></div></div></footer><div class="js-feedback-form modal fade feedbackForm"><div class="modal-dialog"><div class="modal-content"><div class="modal-header"><button name="button" type="submit" class="close" data-dismiss="modal">&times;</button><h4 class="modal-title">ご意見</h4></div><div class="modal-body"><form class="js-feedback-form-form" action="/feedbacks" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="Krj/2T3nkMM75Y4VGigrMqW4PeGXwsOBKEa2xQKL1ley5g1eF2JZYxZXC5tjkpNrIXk8yAMv57B0dAxOu0HtSA==" /><div class="form-group"><textarea name="feedback[message]" id="feedback_message" class="form-control js-feedback-form-text-area" placeholder="Qiitaについてのご意見をお聞かせください。" rows="5">
</textarea></div><div class="feedbackForm_submitButtonContainer"><button name="button" type="submit" class="btn btn-primary feedbackForm_submitButton"><i class="fa fa-send"></i> 送信</button><p class="feedbackForm_note">いただいたご意見への返信は行っておりません。<br />返信の必要な内容については、<a href="https://increments.zendesk.com/anonymous_requests/new">こちら</a> からお問い合わせください。</p></div><div style="position:fixed;top:-99999px;opacity:0.0001;"><input name="feedback[name]" type="text" /></div></form></div></div></div></div><script>if (window.mixpanel instanceof Element) {
  window.mixpanel = [];
}
(function(f,b){if(!b.__SV){var a,e,i,g;window.mixpanel=b;b._i=[];b.init=function(a,e,d){function f(b,h){var a=h.split(".");2==a.length&&(b=b[a[0]],h=a[1]);b[h]=function(){b.push([h].concat(Array.prototype.slice.call(arguments,0)))}}var c=b;"undefined"!==typeof d?c=b[d]=[]:d="mixpanel";c.people=c.people||[];c.toString=function(b){var a="mixpanel";"mixpanel"!==d&&(a+="."+d);b||(a+=" (stub)");return a};c.people.toString=function(){return c.toString(1)+".people (stub)"};i="disable track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config people.set people.set_once people.increment people.append people.track_charge people.clear_charges people.delete_user".split(" ");
for(g=0;g<i.length;g++)f(c,i[g]);b._i.push([a,e,d])};b.__SV=1.2;a=f.createElement("script");a.type="text/javascript";a.async=!0;a.src="//cdn.mxpnl.com/libs/mixpanel-2.2.min.js";e=f.getElementsByTagName("script")[0];e.parentNode.insertBefore(a,e)}})(document,window.mixpanel||[]);</script><script src="http://cdn.qiita.com/assets/vendor-ecbdaffdb0ee937550575b8c156bb398.js"></script><script src="http://cdn.qiita.com/assets/application-22894ee9eda2a52f75e61162405d58ff.js"></script><script>(function (I18n) {
  var match, orig;
  I18n.defaultLocale = "ja";
  I18n.fallbacks = true;
  if (match = location.search.match(/(?:\?|&)locale=([^&]+)/)) {
    I18n.locale = match[1];
    orig = $.ajax;
    $.ajax = function (params) {
      params.data || (params.data = {});
      params.data.locale = match[1];
      return orig.call($, params);
    };
  } else {
    I18n.locale = "ja";
  }
})(I18n);</script><script>
  (function () {
    var script = document.getElementsByTagName('script')[0];
    var load = function (src, id) {
      var el = document.createElement('script');
      el.async = true;
      el.src = src;
      el.id = id;
      script.parentNode.insertBefore(el, script);
    };
      // Optimizely
      load('//cdn.optimizely.com/js/52738645.js', 'optimizely-jssdk');
      // Google Analytics
      window._gaq = window._gaq || [];
      var isCareer = location.hostname.split('.')[0] == 'career';
      if (isCareer) {
        window._gaq.push(['_setAccount', 'UA-24675221-11']);
        window._gaq.push(['_setDomainName', 'qiita.com']);
      } else {
        window._gaq.push(['_setAccount', 'UA-24675221-1']);
      }
      window._gaq.push(['_setCustomVar', 1, 'logged_in', 'false', 2]);
      window._gaq.push(['_trackPageview']);
      var src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      load(src, 'google-analytics-jssdk');
    // Google Analytics - Universal Analytics
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
        ga('create', 'UA-24675221-12', {
          
        });
          ga('create', 'UA-45743115-1', { name: 'user' });
          ga('user.send', 'pageview');
        ga('set', 'dimension1', 'false');
        ga('set', 'dimension3', 'false');
      ga('require', 'displayfeatures');
      ga('set', 'forceSSL', true);
      ga('send', 'pageview');
    // Google Tag Manager
      (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
      new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
      '//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
      })(window,document,'script','dataLayer','GTM-TBQWPN');
  })();
</script>
</body></html>